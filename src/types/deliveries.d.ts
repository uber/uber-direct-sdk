/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/customers/{customer_id}/delivery_quotes": {
    /**
     * Create Quote
     * @description Create a quote to check deliverability, validity and cost for delivery between two addresses.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeliveryQuoteReq"];
        };
      };
      responses: {
        /** @description Successfully created a delivery quote */
        200: {
          content: {
            "application/json": components["schemas"]["DeliveryQuoteResp"];
          };
        };
        /** @description Invalid request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description customer_suspended */
        402: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description customer_blocked */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description customer_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description customer_limited */
        429: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description couriers_busy */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customer_id}/deliveries": {
    /**
     * List Deliveries
     * @description List all deliveries associated with the given `customerId`
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter deliveries by delivery state. Valid values are: “pending”, “pickup”, “pickup_complete”, “dropoff”, “delivered”, “canceled”, “returned”, and “ongoing”. */
          filter?: string;
          /** @description Maximum number of responses to return. */
          limit?: number;
          /** @description Offset of response objects for pagination. */
          Offset?: number;
        };
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved deliveries */
        200: {
          content: {
            "application/json": components["schemas"]["inline_response_200"];
          };
        };
        /** @description invalid_params */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description delivery_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description service_unavailable */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Create Delivery
     * @description Create a delivery between two addresses.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeliveryReq"];
        };
      };
      responses: {
        /** @description Successfully created a delivery quote */
        200: {
          content: {
            "application/json": components["schemas"]["CreateDeliveryResp"];
          };
        };
        /** @description Invalid request */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorWithMetadata"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description customer_suspended */
        402: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description customer_blocked */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description customer_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description duplicate_delivery */
        409: {
          content: {
            "application/json": components["schemas"]["ErrorWithMetadata"];
          };
        };
        /** @description customer_limited */
        429: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description couriers_busy */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customer_id}/deliveries/{delivery_id}": {
    /**
     * Get Delivery
     * @description Get the details of an existing delivery, specified by the `delivery_id` in the URL
     */
    get: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
          /**
           * @description Unique identifier for the delivery. Always starts with del_
           * @example del_ExLGCyywQ5KlvncU2rUUUd3
           */
          delivery_id: string;
        };
      };
      responses: {
        /** @description Successfully retrieved delivery */
        200: {
          content: {
            "application/json": components["schemas"]["GetDeliveryResp"];
          };
        };
        /** @description invalid_params */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description delivery_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description service_unavailable */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /**
     * Update Delivery
     * @description Update the details of an existing delivery, specified by the `delivery_id` in the URL. Please refer to the [FAQ](https://developer.uber.com/docs/deliveries/faq#tag/Delivery/paths/~1customers~1%7Bcustomer_id%7D~1deliveries~1%7Bdelivery_id%7D~1proof-of-delivery/post) section for detailed update timings.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
          /**
           * @description Unique identifier for the delivery. Always starts with del_
           * @example del_ExLGCyywQ5KlvncU2rUUUd3
           */
          delivery_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateDeliveryReq"];
        };
      };
      responses: {
        /** @description Successfully retrieved delivery. */
        200: {
          content: {
            "application/json": components["schemas"]["DeliveryResp"];
          };
        };
        /** @description invalid_params */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description delivery_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description service_unavailable */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customer_id}/deliveries/{delivery_id}/cancel": {
    /**
     * Cancel Delivery
     * @description Cancel an ongoing or previously scheduled delivery.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
          /**
           * @description Unique identifier for the delivery. Always starts with del_
           * @example del_ExLGCyywQ5KlvncU2rUUUd3
           */
          delivery_id: string;
        };
      };
      responses: {
        /** @description Returns the canceled delivery. */
        200: {
          content: {
            "application/json": components["schemas"]["DeliveryResp"];
          };
        };
        /** @description invalid_params */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["401Error"];
          };
        };
        /** @description delivery_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description service_unavailable */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/customers/{customer_id}/deliveries/{delivery_id}/proof-of-delivery": {
    /**
     * Proof of Delivery
     * @description If a delivery is created with any verification requirements (e.g.: picture, signature or pincode), the resulting image file is made available to you through our proof-of-delivery endpoint. The endpoint will return a Proof-of-Delivery (P.O.D.) File – A long Base64 string that can be converted to a PNG image ([Web Converter](https://codebeautify.org/base64-to-image-converter) (External)).
     *
     * The image will include the following information:
     * - Delivery Status
     * - Delivery timestamp
     * - Uber Order ID
     * - External Order ID
     * - Proof Type
     * - Image (Signature image, picture image, or pincode value)
     *
     * For the `signature` verification type, signer name or signer relationship will also be included if it is enabled for a delivery.
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
           * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
           */
          customer_id: string;
          /**
           * @description Unique identifier for the delivery. Always starts with del_
           * @example del_ExLGCyywQ5KlvncU2rUUUd3
           */
          delivery_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PODReq"];
        };
      };
      responses: {
        /** @description Returns the proof of delivery information. */
        200: {
          content: {
            "application/json": components["schemas"]["PODResp"];
          };
        };
        /** @description invalid_params */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description delivery_not_found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description request_timeout */
        408: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description internal_server_error */
        500: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description service_unavailable */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DeliveryQuoteReq: {
      /**
       * @description JSON string containing pickup address details.
       *
       * **Note:** Please note the escaping of the quotes ( \ " ). This is not the simplest format of expression addresses, however, the benefit comes with the corresponding  parsing and accuracy  when it is received by our booking engine. Please refer to our [FAQ section](https://developer.uber.com/docs/deliveries/faq#what-are-the-address-best-practices?) for more information on how to format addresses.
       *
       * @example {"street_address":["100 Maiden Ln"],"city":"New York","state":"NY","zip_code":"10023","country":"US"}
       */
      pickup_address: string;
      /**
       * @description JSON string containing dropoff address details.
       *
       * **Note:** Please note the escaping of the quotes ( \ " ). This is not the simplest format of expression addresses, however, the benefit comes with the corresponding  parsing and accuracy  when it is received by our booking engine. Please refer to our [FAQ section](https://developer.uber.com/docs/deliveries/faq#what-are-the-address-best-practices?) for more information on how to format addresses.
       *
       * @example {"street_address":["30 Lincoln Center Plaza"],"city":"New York","state":"NY","zip_code":"10023","country":"US"}
       */
      dropoff_address: string;
      /**
       * @description Pickup latitude coordinate.
       * @example 40.7066581
       */
      pickup_latitude?: number;
      /**
       * @description Pickup longitude coordinate.
       * @example -74.0071868
       */
      pickup_longitude?: number;
      /**
       * @description Dropoff latitude coordinate.
       * @example 38.9298375
       */
      dropoff_latitude?: number;
      /**
       * @description Dropoff longitude coordinate.
       * @example -77.0582303
       */
      dropoff_longitude?: number;
      /**
       * Format: timestamp
       * @description (RFC 3339) Beginning of the window when an order must be picked up. Must be less than 30 days in the future.
       * @example "2024-12-12T14:00:00.000Z"
       */
      pickup_ready_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) End of the window when an order may be picked up. Must be at least 10 mins later than pickup_ready_dt and at least 20 minutes in the future from now.
       * @example "2024-12-12T14:30:00.000Z"
       */
      pickup_deadline_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) Beginning of the window when an order must be dropped off. Must be less than or equal to pickup_deadline_dt.
       * @example "2024-12-12T14:30:00.000Z"
       */
      dropoff_ready_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) End of the window when an order must be dropped off. Must be at least 20 mins later than dropoff_ready_dt and must be greater than or equal to pickup_deadline_dt.
       * @example "2024-12-12T16:00:00.000Z"
       */
      dropoff_deadline_dt?: string;
      /**
       * @description Phone number for the pickup location, usually the store's contact. This number allows the courier to call before heading to the dropoff location.
       * @example +15555555555
       */
      pickup_phone_number?: string;
      /**
       * @description Phone number for the dropoff location, usually belonging to the end-user (recipient). This number enables the courier to make calls after en route to the dropoff and before completing the trip.
       * @example +15555555555
       */
      dropoff_phone_number?: string;
      /**
       * @description Value in cents ( ¹/₁₀₀ of currency unit ) of the items in the delivery.  i.e.: $10.99 => 1099.
       * @example 1000
       */
      manifest_total_value?: number;
      /**
       * @description Unique identifier used by our Partners to reference a store or location. Merchants can search for this value in the dashboard, and it is also visible on the billing details report generated by the dashboard.
       *
       * **Note:** Please be aware that if you utilize `external_store_id` in the Create Delivery process, you MUST also include this field in your Create Quote API calls.
       *
       * @example my_store_123
       */
      external_store_id?: string;
    };
    DeliveryQuoteResp: {
      /**
       * @description The type of object being described. Default: `delivery_quote`
       * @example delivery_quote
       */
      kind?: string;
      /**
       * @description Unique identifier for the quote (always starts with `dqt_`)
       * @example dqt_6gQ2dt31TjiOPfwux-NCXg
       */
      id?: string;
      /**
       * @description Date/Time timestamp (RFC 3339) at which the quote was created.
       * @example "2023-04-06T19:00:37.887Z"
       */
      created?: string;
      /**
       * @description Date/Time timestamp (RFC 3339) after which the quote will no longer be accepted.
       * @example "2023-04-06T19:15:37.887Z"
       */
      expires?: string;
      /**
       * @description Amount in cents (¹/₁₀₀ of currency unit) that will be charged if this delivery is created.
       * @example 600
       */
      fee?: number;
      /**
       * @deprecated
       * @description Three-letter ISO currency code, in lowercase.
       * @example usd
       */
      currency?: string;
      /**
       * @description Three-letter ISO currency code, in uppercase.
       * @example USD
       */
      currency_type?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) Estimated drop-off time.
       * @example "2023-04-06T19:34:22.000Z"
       */
      dropoff_eta?: string;
      /**
       * @description Estimated minutes for this delivery to reach dropoff
       * @example 33
       */
      duration?: number;
      /**
       * @description Estimated minutes until a courier will arrive at the pickup.
       * @example 24
       */
      pickup_duration?: number;
      /**
       * Format: timestamp
       * @description When a delivery must be dropped off. This is the end of the dropoff window.
       * @example "2023-04-06T20:09:20.000Z"
       */
      dropoff_deadline?: string;
    };
    Error: {
      /** @description A coded name for the specific error (e.g., `invalid_params`, `duplicate_delivery`, `pickup_window_too_small`) */
      code?: string;
      /** @description A brief description of the error (e.g., `The parameters of your request were invalid`) */
      message?: string;
      /** @description The kind of response. Default: `error` */
      kind?: string;
    };
    "401Error": {
      /** @description A coded name for the specific error (e.g., `invalid_params`, `duplicate_delivery`, `pickup_window_too_small`) */
      code?: string;
      /** @description A brief description of the error (e.g., `The parameters of your request were invalid`) */
      message?: string;
    };
    ErrorWithMetadata: {
      /** @description A coded name for the specific error (e.g., `invalid_params`, `duplicate_delivery`, `pickup_window_too_small`) */
      code?: string;
      /** @description A brief description of the error (e.g., `The parameters of your request were invalid`) */
      message?: string;
      /** @description The kind of response. Default: `error` */
      kind?: string;
      /** @description (Optional) Comprehensive details about this error. */
      metadata?: {
        /** @description The duplicated delivery ID. */
        delivery_id?: string;
      };
    };
    DeliveryReq: {
      /**
       * @description Designation of the location where the courier will make the pickup. This information will be visible within the courier app.
       *
       * **Note:** The app will prioritize the utilization of the `pickup_business_name` if this parameter is provided.
       *
       * @example Store Name
       */
      pickup_name: string;
      /**
       * @description JSON string containing pickup address details.
       *
       * **Note:** Please note the escaping of the quotes ( \ " ). This is not the simplest format of expression addresses, however, the benefit comes with the corresponding  parsing and accuracy  when it is received by our booking engine. Please refer to our [FAQ section](https://developer.uber.com/docs/deliveries/faq#what-are-the-address-best-practices?) for more information on how to format addresses.
       *
       * @example {"street_address":["100 Maiden Ln"],"city":"New York","state":"NY","zip_code":"10023","country":"US"}
       */
      pickup_address: string;
      /**
       * @description Phone number for the pickup location, usually the store's contact. This number allows the courier to call before heading to the dropoff location.
       * @example +15555555555
       */
      pickup_phone_number: string;
      /**
       * @description Name of the place where the courier will make the dropoff. This information will be visible in the courier app.
       * @example Gordon Shumway
       */
      dropoff_name: string;
      /**
       * @description JSON string containing dropoff address details.
       *
       * **Note:** Please note the escaping of the quotes ( \ " ). This is not the simplest format of expression addresses, however, the benefit comes with the corresponding  parsing and accuracy  when it is received by our booking engine. Please refer to our [FAQ section](https://developer.uber.com/docs/deliveries/faq#what-are-the-address-best-practices?) for more information on how to format addresses.
       *
       * @example {"street_address":["30 Lincoln Center Plaza"],"city":"New York","state":"NY","zip_code":"10023","country":"US"}
       */
      dropoff_address: string;
      /**
       * @description Phone number for the dropoff location, usually belonging to the end-user (recipient). This number enables the courier to make calls after en route to the dropoff and before completing the trip.
       * @example +15555555555
       */
      dropoff_phone_number: string;
      /** @description List of items being delivered. This information will be visible in the courier app. */
      manifest_items: components["schemas"]["ManifestItem"][];
      /**
       * @description Business name of the pickup location. This information will be visible in the courier app and will override the pickup_name if provided.
       * @example Store Name
       */
      pickup_business_name?: string;
      /**
       * @description Pickup latitude coordinate.
       * @example 40.7066745
       */
      pickup_latitude?: number;
      /**
       * @description Pickup longitude coordinate.
       * @example -74.0071976
       */
      pickup_longitude?: number;
      /**
       * @description Additional instructions for the courier at the pickup location. Max 280 characters.
       * @example Follow big green 'Pickup' signs in the parking lot
       */
      pickup_notes?: string;
      pickup_verification?: components["schemas"]["PickupVerificationRequirement"];
      /**
       * @description Business name of the dropoff location.
       * @example House of Luciano
       */
      dropoff_business_name?: string;
      /**
       * @description Dropoff latitude coordinate. This field adds precision to dropoff_address field. For example, if the dropoff address is "JFK Airport Queens, NY 11430", it would be highly recommended to use coordinates to locate the precise location of the dropoff
       * @example 40.7727076
       */
      dropoff_latitude?: number;
      /**
       * @description Dropoff longitude coordinate. This field adds precision to dropoff_address field. For example, if the dropoff address is "JFK Airport Queens, NY 11430", it would be highly recommended to use coordinates to locate the precise location of the dropoff.
       * @example -73.9839082
       */
      dropoff_longitude?: number;
      /**
       * @description accessible after the courier accepts the trip and before heading to the dropoff location. Limited to 280 characters.
       * @example Second floor, black door to the right.
       */
      dropoff_notes?: string;
      /**
       * @description Merchant's extra dropoff instructions, accessible after the courier accepts the trip and before heading to the dropoff location. Limited to 280 characters.
       * @example Fragile content - please handle the box with care during delivery.
       */
      dropoff_seller_notes?: string;
      dropoff_verification?: components["schemas"]["DropoffVerificationRequest"];
      deliverable_action?: components["schemas"]["DeliverableAction"];
      /**
       * @description A reference identifying the manifest. Utilize this to link a delivery with relevant data in your system. This detail will be visible within the courier app.\
       * **Note:**
       * 1. Please be aware that the combination of this field with `external_id` must be unique; otherwise, the delivery creation will not succeed.
       * 2. If you can't ensure uniqueness for the manifest_reference, please include the "idempotency_key" in the request body and make sure it is unique.
       *
       * @example REF0000002
       */
      manifest_reference?: string;
      /**
       * @description Value in cents ( ¹/₁₀₀ of currency unit ) of the items in the delivery.  i.e.: $10.99 => 1099.
       * @example 1000
       */
      manifest_total_value?: number;
      /**
       * @description The ID of a previously generated delivery quote.
       * @example dqt_gpBlJ0nkTFoZ_KcRPUD8Br
       */
      quote_id?: string;
      undeliverable_action?: components["schemas"]["UndeliverableAction"];
      /**
       * Format: timestamp
       * @description (RFC 3339) Beginning of the window when an order must be picked up. Must be less than 30 days in the future.
       * @example "2024-12-12T14:00:00.000Z"
       */
      pickup_ready_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) End of the window when an order may be picked up. Must be at least 10 mins later than pickup_ready_dt and at least 20 minutes in the future from now.
       * @example "2024-12-12T14:30:00.000Z"
       */
      pickup_deadline_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) Beginning of the window when an order must be dropped off. Must be less than or equal to pickup_deadline_dt.
       * @example "2024-12-12T14:30:00.000Z"
       */
      dropoff_ready_dt?: string;
      /**
       * Format: timestamp
       * @description (RFC 3339) End of the window when an order must be dropped off. Must be at least 20 mins later than dropoff_ready_dt and must be greater than or equal to pickup_deadline_dt.
       * @example "2024-12-12T16:00:00.000Z"
       */
      dropoff_deadline_dt?: string;
      /**
       * @deprecated
       * @description Flag to indicate this delivery requires signature capture at dropoff.
       */
      requires_dropoff_signature?: boolean;
      /**
       * @deprecated
       * @description (Please use "dropoff_verification -> identification" instead). Flag to indicate this delivery requires ID check (minimum age) at dropoff.
       * @example false
       */
      requires_id?: boolean;
      /**
       * @description
       * Amount in cents ( ¹/₁₀₀ of currency unit ) that will be paid to the courier as a tip. e.g.: `$5.00` => `500`.
       *
       * **Note:** The fee value in the Create Delivery response includes the tip value.
       *
       * @example 500
       */
      tip?: number;
      /**
       * @description A key which is used to avoid duplicate order creation with identical idempotency keys for the same account. The key persists for a set time frame, defaulting to 60 minutes.
       * @example 1234567890
       */
      idempotency_key?: string;
      /**
       * @description Unique identifier used by our Partners to reference a store or location. Merchants can search for this value in the dashboard, and it is also visible on the billing details report generated by the dashboard.
       *
       * **Note:** Please be aware that if you utilize `external_store_id` in the Create Delivery process, you MUST also include this field in your Create Quote API calls.
       *
       * @example my_store_123
       */
      external_store_id?: string;
      return_verification?: components["schemas"]["ReturnVerificationRequirement"];
      external_user_info?: components["schemas"]["DeliveryReq_external_user_info"];
      /**
       * @description Additional reference to identify the manifest. To be used by aggregators, POS systems, and other organization structures which have an internal reference in addition to the manifest_reference used by your sub-account. Merchants can search for this value in the dashboard, and it is also visible on the billing details report generated by the dashboard.
       * @example 1234567890
       */
      external_id?: string;
    };
    StructuredAddress: {
      /** @description Array of street address elements. For example: ["2000 Ocean Ave", "Floor 2" ] */
      street_address?: unknown[];
      city?: string;
      state?: string;
      zip_code?: string;
      country?: string;
    };
    ManifestItem: {
      /**
       * @description Description of item.
       * @example Bow tie
       */
      name?: string;
      /**
       * @description Quantity of items.
       * @example 1
       */
      quantity?: number;
      /**
       * @description Approximate size of item:
       * | Size | Description |
       * |--------|--------|
       * | small  | You can carry it with one hand e.g. bottle of water. |
       * | medium | You need a tote bag to carry it e.g. retail bag. |
       * | large  | You need two hands to carry it e.g. computer monitor. |
       * | xlarge | You need two hands to carry it e.g. 42 inch Flat Screen TV. |
       *
       * **Note:** If nothing is specified, small will be applied by default.
       *
       * @enum {string}
       */
      size?: "small" | "medium" | "large" | "xlarge";
      dimensions?: components["schemas"]["ManifestItemDimensions"];
      /**
       * @description (optional) Price in cents  ( ¹/₁₀₀ of currency unit ).
       * @example 100
       */
      price?: number;
      /**
       * @description Whether the item should be in upright position (box of pizza, bottle of milk etc).
       * @example false
       */
      must_be_upright?: boolean;
      /**
       * @description Weight in grams.
       * @example 300
       */
      weight?: number;
      /**
       * @description The percentage of VAT (value add tax) associated to the manifest_items. i.e.: 12.5% => 1250000.
       * @example 1250000
       */
      vat_percentage?: number;
    };
    ManifestItemSize: {
      /** @description You can carry it with one hand e.g. bottle of water. */
      small?: string;
      /** @description You need a tote bag to carry it e.g. retail bag. */
      medium?: string;
      /** @description You need two hands to carry it e.g. computer monitor. */
      large?: string;
      /** @description You need two hands to carry it e.g. 42 inch Flat Screen TV. */
      xlarge?: string;
      /** @description Same as large. */
      big?: string;
    };
    /** @description Struct that contains dimensions. Note that `weight` is required when dimensions(`length`, `depth` and `height`) are provided. */
    ManifestItemDimensions: {
      /**
       * @description Length in centimeters
       * @example 20
       */
      length?: number;
      /**
       * @description Height in centimeters
       * @example 20
       */
      height?: number;
      /**
       * @description Depth in centimeters
       * @example 20
       */
      depth?: number;
    };
    /**
     * @description Specify the action for the courier to take on a delivery.
     * | Name | Description |
     * | ---- | ----- |
     * | deliverable_action_meet_at_door | Meet at door delivery. This is the default if DeliverableAction is not set. |
     * | deliverable_action_leave_at_door | The “happy path” action for the courier to take on a delivery. When used, delivery action can be set to “leave at door” for a contactless delivery. Cannot leave at door when signature or ID verification requirements are applied when creating a delivery. Photo confirmation of delivery will be automatically applied as a requirement to complete drop-off. |
     *
     * @enum {string}
     */
    DeliverableAction: "deliverable_action_meet_at_door" | "deliverable_action_leave_at_door";
    /** @description Verification steps (e.g. Barcode scanning) that must be taken before the pickup can be completed. */
    UpdatePickupVerificationRequirement: {
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
    };
    /** @description Verification steps (e.g. Picture, Barcode scanning) that must be taken before the pickup can be completed. */
    PickupVerificationRequirement: {
      /**
       * @deprecated
       * @description Flag for if a signature is required at this waypoint. `signature_requirement` should be used instead.
       */
      signature?: boolean;
      signature_requirement?: components["schemas"]["SignatureRequirement"];
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
      identification?: components["schemas"]["IdentificationRequirement"];
      /** @description Flag to indicate whether a photo is mandatory at this waypoint. */
      picture?: boolean;
    };
    /** @description Verification steps (e.g. Barcode scanning) that must be taken before the dropoff can be completed. */
    UpdateDropoffVerificationRequest: {
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
    };
    /** @description Verification steps (e.g. Picture, Barcode scanning) that must be taken before the dropoff can be completed. */
    DropoffVerificationRequest: {
      /**
       * @deprecated
       * @description Flag for if a signature is required at this waypoint.
       */
      signature?: boolean;
      signature_requirement?: components["schemas"]["SignatureRequirement"];
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
      pincode?: components["schemas"]["PincodeRequest"];
      identification?: components["schemas"]["IdentificationRequirement"];
      /** @description When set to true, mandates the Courier to capture an image as proof of delivery. */
      picture?: boolean;
    };
    /** @description Verification steps (e.g. Picture, barcode scanning) that must be taken before the dropoff can be completed. */
    DropoffVerificationResp: {
      /**
       * @deprecated
       * @description Flag for if a signature is required at this waypoint.
       */
      signature?: boolean;
      signature_requirement?: components["schemas"]["SignatureRequirement"];
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
      pincode?: components["schemas"]["PincodeRequirement"];
      identification?: components["schemas"]["IdentificationRequirement"];
      /** @description When set to true, mandates the Courier to capture an image as proof of delivery. */
      picture?: boolean;
    };
    /** @description Verification steps (barcode scanning, picture, or signature) that must be taken before the return can be completed. */
    ReturnVerificationRequirement: {
      /**
       * @deprecated
       * @description Flag for if a signature is required at this waypoint.
       */
      signature?: boolean;
      signature_requirement?: components["schemas"]["SignatureRequirement"];
      /** @description Barcode values/types that must be scanned at the waypoint. Number of elements in the array is equal to the number of barcodes that must be scanned. */
      barcodes?: components["schemas"]["BarcodeRequirement"][];
      /** @description Picture captured at the return waypoint. */
      picture?: boolean;
    };
    BarcodeRequirement: {
      /** @description String value encoded in the barcode. */
      value?: string;
      /**
       * @description Type of barcode. Valid values: "CODE39", "CODE39_FULL_ASCII", "CODE128", "QR".
       * @enum {string}
       */
      type?: "CODE39" | "CODE39_FULL_ASCII" | "CODE128" | "QR";
    };
    PincodeRequirement: {
      /** @description When set to true in POST requests, the delivery will require pincode entry at handoff. */
      enabled?: boolean;
      /**
       * @description The pincode that the customer must present at dropoff. The pin code is internally generated when this requirement is present and shared by Uber.
       * @example 1234
       */
      value?: string;
    };
    PincodeRequest: {
      /** @description When set to true in POST requests, the delivery will require pincode entry at handoff. The pincode is internally generated and shared by Uber. */
      enabled?: boolean;
    };
    /** @description Identification scanning/verification requirements for this waypoint. */
    IdentificationRequirement: {
      /**
       * @description Minimum age that must be verified for this delivery. Please refer to [Identification](https://developer.uber.com/docs/deliveries/guides/proof-of-delivery#identification) guide for more information.
       * @example 21
       */
      min_age?: number;
    };
    VerificationProof: {
      signature?: components["schemas"]["SignatureProof"];
      /** @description Barcode values/types that were scanned. */
      barcodes?: components["schemas"]["BarcodeProof"][];
      picture?: components["schemas"]["PictureProof"];
      identification?: components["schemas"]["IdentificationProof"];
      pin_code?: components["schemas"]["PincodeProof"];
      completion_location?: components["schemas"]["LatLng"];
    };
    SignatureProof: {
      /**
       * @description The URL of the signature image.
       * @example https://tb-static.uber.com/prod/file-upload/uploads/courier-task-platform/82a0d88e-100d-40d6-a0d0-ea9c4a2e55bb
       */
      image_url?: string;
      /**
       * @description The name of the person who signed for the package.
       * @example Joan
       */
      name?: string;
      /**
       * @description The relationship of the person who signed for the package to the intended recipient.
       * @enum {string}
       */
      signer_relationship?: "SELF" | "INVALID" | "FRIEND" | "LEGAL_REPRESENTATIVE" | "PARENT_OR_GUARDIAN" | "SPOUSE";
    };
    /** @description Signature requirement spec to indicate that a signature must be collected at this waypoint. */
    SignatureRequirement: {
      /** @description Flag for if a signature is required at this waypoint. */
      enabled?: boolean;
      /** @description Flag for if the signer's name is required at this waypoint. */
      collect_signer_name?: boolean;
      /** @description Flag for if the signer's relationship to the intended recipient is required at this waypoint. */
      collect_signer_relationship?: boolean;
    };
    PictureProof: {
      /**
       * @description The URL of the image taken at the waypoint.
       * @example https://tb-static.uber.com/prod/file-upload/uploads/courier-task-platform/82a0d88e-100d-40d6-a0d0-ea9c4a2e55bb
       */
      image_url?: string;
    };
    IdentificationProof: {
      /**
       * @description Flag if ID was successfully verified/scanned.
       * @example false
       */
      min_age_verified?: boolean;
    };
    PincodeProof: {
      /**
       * @description Value entered during PIN verification.
       * @example 3902
       */
      entered?: string;
    };
    BarcodeProof: {
      /**
       * @description Type of barcode. Valid values: "CODE39", "CODE39_FULL_ASCII", "CODE128", "QR".
       * @example CODE128
       */
      type?: string;
      /**
       * @description String value encoded in the barcode.
       * @example 1234567890
       */
      value?: string;
      scan_result?: components["schemas"]["BarcodeScanResult"];
    };
    BarcodeScanResult: {
      /**
       * @description Outcome of the barcode scanning
       * @enum {string}
       */
      outcome?: "SUCCESS" | "INVALID" | "SKIPPED";
      /**
       * Format: datetime
       * @description Timestamp when the barcode was scanned or skipped
       * @example "2023-05-02T04:34:04.957Z"
       */
      timestamp?: string;
    };
    /**
     * @description If not set then the default value is `return`
     *
     *   - `leave_at_door`: Once a normal delivery attempt is made and a customer is not available. This action requests the courier to leave the package at dropoff location.
     *
     *   **Note 1:** It cannot be set to `leave at door` when signature or PIN or ID verification requirements are applied when creating a delivery.
     *
     *   **Note 2:** A photo confirmation of delivery will be automatically applied as a requirement to complete the dropoff.
     *
     *   - `return`:  Once a normal delivery attempt is made and a customer is not available. This action requests the courier to return the package back to the pickup location.
     *
     *   **Note:** Even if `deliverable_action` was set as `leave at door` and courier feels it is not okay then the package can be returned back to the pickup location.
     *
     *   - `discard`: Discard option will allow the courier to keep/throw away the package if they are unable to deliver the package.
     *
     * @enum {string}
     */
    UndeliverableAction: "leave_at_door" | "return" | "discard";
    GetDeliveryResp: {
      /**
       * @description Unique identifier for the delivery (`del_` + tokenize(uuid)).
       * @example del_gDcyfRgyQcyN0obpqqS_1B
       */
      id?: string;
      /**
       * @description ID for the Delivery Quote if one was provided when creating this delivery.
       * @example dqt_6gQ2dt31TjiOPfwux-NCXg
       */
      quote_id?: string;
      /**
       * @description Flag indicating if the delivery has ended, regardless of the possible end status values: `delivered`, `canceled`, `returned`.
       * @example false
       */
      complete?: boolean;
      courier?: components["schemas"]["CourierInfo"];
      /** @description Flag indicating if the courier is close to the pickup or dropoff location. */
      courier_imminent?: boolean;
      /**
       * Format: timestamp
       * @description Date/time at which the delivery was created.
       * @example "2023-05-01T22:15:13.646Z"
       */
      created?: string;
      /**
       * @description Three-letter ISO currency code, in lowercase.
       * @example usd
       */
      currency?: string;
      deliverable_action?: components["schemas"]["DeliverableAction"];
      dropoff?: components["schemas"]["WaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be dropped off. This is the end of the dropoff window.
       * @example "2023-05-01T23:01:37.000Z"
       */
      dropoff_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated dropoff time.
       * @example "2023-05-01T22:30:00.077Z"
       */
      dropoff_eta?: string;
      /**
       * @description This field identifies who received delivery at the dropoff location.
       * @example
       */
      dropoff_identifier?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be dropped off. This is the start of the dropoff window.
       * @example "2023-05-01T22:15:13.000Z"
       */
      dropoff_ready?: string;
      /**
       * @description An ID for an account as stored in a merchant's external system.
       * @example EI000001
       */
      external_id?: string;
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be charged if this delivery is created.
       * @example 1099
       */
      fee?: number;
      /**
       * @description The type of object being described. Always "delivery".
       * @example delivery
       */
      kind?: string;
      /** @description Flag that indicates if this is live mode or test mode. */
      live_mode?: boolean;
      manifest?: components["schemas"]["ManifestInfo"];
      manifest_items?: components["schemas"]["ManifestItem"];
      pickup?: components["schemas"]["WaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be picked up by. This is the end of the pickup window.
       * @example "2023-05-01T22:35:13.000Z"
       */
      pickup_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated time the courier will arrive at the pickup location.
       * @example "2023-05-01T22:16:21.749Z"
       */
      pickup_eta?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be picked up. This is the start of the pickup window.
       */
      pickup_ready?: string;
      related_deliveries?: components["schemas"]["RelatedDelivery"];
      /**
       * @description The current status of the delivery. Always pending when the delivery is created.
       * @enum {string}
       */
      status?: "pending" | "pickup" | "pickup_complete" | "dropoff" | "delivered" | "canceled" | "returned";
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be paid to the courier as a tip.
       * @example 500
       */
      tip?: number;
      /**
       * @description This URL can be used to track the courier during the delivery (via an unauthenticated webpage).
       * @example https://www.ubereats.com/orders/62105936-e413-40d5-aecd-4c335c3cd3c2
       */
      tracking_url?: string;
      /**
       * @description This does not reflect the `undeliverable_action` specified in the delivery request. If a delivery was undeliverable, this field will contain the resulting action taken by the courier.
       * | Name | Description |
       * | ---- | ---- |
       * | "" | The delivery is not yet completed or the delivery was successful. |
       * | "left_at_door" | The courier left the delivery at the dropoff waypoint after failing to hand over the delivery successfully to the dropoff person. Refer the photo confirmation of the delivery through `dropoff.verification.picture`. |
       * | "returned" | The courier returned the delivery to the pickup waypoint after failing to complete the delivery. |
       *
       * @enum {string}
       */
      undeliverable_action?: "" | "returned" | "left_at_door";
      /**
       * @description If a delivery was undeliverable, this field will contain the reason why it was undeliverable, otherwise this field will remain as an empty string "". For example: `NO_SECURE_LOCATION_TO_DROPOFF`
       * @example
       */
      undeliverable_reason?: string;
      /**
       * Format: timestamp
       * @description Date/Time at which the delivery was last updated.
       * @example "2023-05-01T22:16:20.023Z"
       */
      updated?: string;
      /**
       * @description Alternative delivery identifier. The `id` field should be used for any identification purposes. The `uuid` field is equally unique but loses contextual information - Nothing in this identifier indicates that it points to a Delivery. `uuid` is case-sensitive. Value for the `1uuid` field is UUID v4 with `-` characters removed.
       * @example 62105936E41340D5AECD4C335C3CD3C2
       */
      uuid?: string;
      return?: components["schemas"]["WaypointInfo"];
      refund?: components["schemas"]["Refund"];
      /**
       * @description Unique identifier of the batch. This field will determine what orders should be batched together by store operations for courier pickup.
       * @example bat_0dtbO9MhUAW6yezXDqQUqQ
       */
      batch_id?: string;
    };
    CreateDeliveryResp: {
      /**
       * @description Unique identifier for the delivery (`del_` + tokenize(uuid)).
       * @example del_gDcyfRgyQcyN0obpqqS_1B
       */
      id?: string;
      /**
       * @description ID for the Delivery Quote if one was provided when creating this delivery.
       * @example dqt_6gQ2dt31TjiOPfwux-NCXg
       */
      quote_id?: string;
      /**
       * @description Flag indicating if the delivery has ended, regardless of the possible end status values: `delivered`, `canceled`, `returned`.
       * @example false
       */
      complete?: boolean;
      courier?: components["schemas"]["CourierInfo"];
      /** @description Flag indicating if the courier is close to the pickup or dropoff location. */
      courier_imminent?: boolean;
      /**
       * Format: timestamp
       * @description Date/time at which the delivery was created.
       * @example "2023-05-01T22:15:13.646Z"
       */
      created?: string;
      /**
       * @description Three-letter ISO currency code, in lowercase.
       * @example usd
       */
      currency?: string;
      deliverable_action?: components["schemas"]["DeliverableAction"];
      dropoff?: components["schemas"]["CreateDeliveryWaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be dropped off. This is the end of the dropoff window.
       * @example "2023-05-01T23:01:37.000Z"
       */
      dropoff_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated dropoff time.
       * @example "2023-05-01T22:30:00.077Z"
       */
      dropoff_eta?: string;
      /**
       * @description This field identifies who received delivery at the dropoff location.
       * @example
       */
      dropoff_identifier?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be dropped off. This is the start of the dropoff window.
       * @example "2023-05-01T22:15:13.000Z"
       */
      dropoff_ready?: string;
      /**
       * @description An ID for an account as stored in a merchant's external system.
       * @example EI000001
       */
      external_id?: string;
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be charged if this delivery is created.
       * @example 1099
       */
      fee?: number;
      /**
       * @description The type of object being described. Always "delivery".
       * @example delivery
       */
      kind?: string;
      /** @description Flag that indicates if this is live mode or test mode. */
      live_mode?: boolean;
      manifest?: components["schemas"]["ManifestInfo"];
      manifest_items?: components["schemas"]["ManifestItem"];
      pickup?: components["schemas"]["WaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be picked up by. This is the end of the pickup window.
       * @example "2023-05-01T22:35:13.000Z"
       */
      pickup_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated time the courier will arrive at the pickup location.
       * @example "2023-05-01T22:16:21.749Z"
       */
      pickup_eta?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be picked up. This is the start of the pickup window.
       */
      pickup_ready?: string;
      related_deliveries?: components["schemas"]["RelatedDelivery"];
      /**
       * @description The current status of the delivery. Always pending when the delivery is created.
       * @enum {string}
       */
      status?: "pending" | "pickup" | "pickup_complete" | "dropoff" | "delivered" | "canceled" | "returned";
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be paid to the courier as a tip.
       * @example 500
       */
      tip?: number;
      /**
       * @description This URL can be used to track the courier during the delivery (via an unauthenticated webpage).
       * @example https://www.ubereats.com/orders/62105936-e413-40d5-aecd-4c335c3cd3c2
       */
      tracking_url?: string;
      /**
       * @description This does not reflect the `undeliverable_action` specified in the delivery request. If a delivery was undeliverable, this field will contain the resulting action taken by the courier.
       * | Name | Description |
       * | ---- | ---- |
       * | "" | The delivery is not yet completed or the delivery was successful. |
       * | "left_at_door" | The courier left the delivery at the dropoff waypoint after failing to hand over the delivery successfully to the dropoff person. Refer the photo confirmation of the delivery through `dropoff.verification.picture`. |
       * | "returned" | The courier returned the delivery to the pickup waypoint after failing to complete the delivery. |
       *
       * @enum {string}
       */
      undeliverable_action?: "" | "returned" | "left_at_door";
      /**
       * @description If a delivery was undeliverable, this field will contain the reason why it was undeliverable, otherwise this field will remain as an empty string "". For example: `NO_SECURE_LOCATION_TO_DROPOFF`
       * @example
       */
      undeliverable_reason?: string;
      /**
       * Format: timestamp
       * @description Date/Time at which the delivery was last updated.
       * @example "2023-05-01T22:16:20.023Z"
       */
      updated?: string;
      /**
       * @description Alternative delivery identifier. The `id` field should be used for any identification purposes. The `uuid` field is equally unique but loses contextual information - Nothing in this identifier indicates that it points to a Delivery. `uuid` is case-sensitive. Value for the `1uuid` field is UUID v4 with `-` characters removed.
       * @example 62105936E41340D5AECD4C335C3CD3C2
       */
      uuid?: string;
      return?: components["schemas"]["WaypointInfo"];
      /**
       * @description Unique identifier of the batch. This field will determine what orders should be batched together by store operations for courier pickup.
       * @example bat_0dtbO9MhUAW6yezXDqQUqQ
       */
      batch_id?: string;
    };
    DeliveryResp: {
      /**
       * @description Unique identifier for the delivery (`del_` + tokenize(uuid)).
       * @example del_gDcyfRgyQcyN0obpqqS_1B
       */
      id?: string;
      /**
       * @description ID for the Delivery Quote if one was provided when creating this delivery.
       * @example dqt_6gQ2dt31TjiOPfwux-NCXg
       */
      quote_id?: string;
      /**
       * @description Flag indicating if the delivery has ended, regardless of the possible end status values: `delivered`, `canceled`, `returned`.
       * @example false
       */
      complete?: boolean;
      courier?: components["schemas"]["CourierInfo"];
      /** @description Flag indicating if the courier is close to the pickup or dropoff location. */
      courier_imminent?: boolean;
      /**
       * Format: timestamp
       * @description Date/time at which the delivery was created.
       * @example "2023-05-01T22:15:13.646Z"
       */
      created?: string;
      /**
       * @description Three-letter ISO currency code, in lowercase.
       * @example usd
       */
      currency?: string;
      deliverable_action?: components["schemas"]["DeliverableAction"];
      dropoff?: components["schemas"]["WaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be dropped off. This is the end of the dropoff window.
       * @example "2023-05-01T23:01:37.000Z"
       */
      dropoff_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated dropoff time.
       * @example "2023-05-01T22:30:00.077Z"
       */
      dropoff_eta?: string;
      /**
       * @description This field identifies who received delivery at the dropoff location.
       * @example
       */
      dropoff_identifier?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be dropped off. This is the start of the dropoff window.
       * @example "2023-05-01T22:15:13.000Z"
       */
      dropoff_ready?: string;
      /**
       * @description An ID for an account as stored in a merchant's external system.
       * @example EI000001
       */
      external_id?: string;
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be charged if this delivery is created.
       * @example 1099
       */
      fee?: number;
      /**
       * @description The type of object being described. Always "delivery".
       * @example delivery
       */
      kind?: string;
      /** @description Flag that indicates if this is live mode or test mode. */
      live_mode?: boolean;
      manifest?: components["schemas"]["ManifestInfo"];
      manifest_items?: components["schemas"]["ManifestItem"];
      pickup?: components["schemas"]["WaypointInfo"];
      /**
       * Format: timestamp
       * @description When a delivery must be picked up by. This is the end of the pickup window.
       * @example "2023-05-01T22:35:13.000Z"
       */
      pickup_deadline?: string;
      /**
       * Format: timestamp
       * @description Estimated time the courier will arrive at the pickup location.
       * @example "2023-05-01T22:16:21.749Z"
       */
      pickup_eta?: string;
      /**
       * Format: timestamp
       * @description When a delivery is ready to be picked up. This is the start of the pickup window.
       */
      pickup_ready?: string;
      related_deliveries?: components["schemas"]["RelatedDelivery"];
      /**
       * @description The current status of the delivery. Always pending when the delivery is created.
       * @enum {string}
       */
      status?: "pending" | "pickup" | "pickup_complete" | "dropoff" | "delivered" | "canceled" | "returned";
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be paid to the courier as a tip.
       * @example 500
       */
      tip?: number;
      /**
       * @description This URL can be used to track the courier during the delivery (via an unauthenticated webpage).
       * @example https://www.ubereats.com/orders/62105936-e413-40d5-aecd-4c335c3cd3c2
       */
      tracking_url?: string;
      /**
       * @description This does not reflect the `undeliverable_action` specified in the delivery request. If a delivery was undeliverable, this field will contain the resulting action taken by the courier.
       * | Name | Description |
       * | ---- | ---- |
       * | "" | The delivery is not yet completed or the delivery was successful. |
       * | "left_at_door" | The courier left the delivery at the dropoff waypoint after failing to hand over the delivery successfully to the dropoff person. Refer the photo confirmation of the delivery through `dropoff.verification.picture`. |
       * | "returned" | The courier returned the delivery to the pickup waypoint after failing to complete the delivery. |
       *
       * @enum {string}
       */
      undeliverable_action?: "" | "returned" | "left_at_door";
      /**
       * @description If a delivery was undeliverable, this field will contain the reason why it was undeliverable, otherwise this field will remain as an empty string "". For example: `NO_SECURE_LOCATION_TO_DROPOFF`
       * @example
       */
      undeliverable_reason?: string;
      /**
       * Format: timestamp
       * @description Date/Time at which the delivery was last updated.
       * @example "2023-05-01T22:16:20.023Z"
       */
      updated?: string;
      /**
       * @description Alternative delivery identifier. The `id` field should be used for any identification purposes. The `uuid` field is equally unique but loses contextual information - Nothing in this identifier indicates that it points to a Delivery. `uuid` is case-sensitive. Value for the `1uuid` field is UUID v4 with `-` characters removed.
       * @example 62105936E41340D5AECD4C335C3CD3C2
       */
      uuid?: string;
      return?: components["schemas"]["WaypointInfo"];
    };
    PODResp: {
      /**
       * @description A long Base64 string representing the image.
       * @example iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX///+/v7+jQ3Y5AAAADklEQVQI12P4AIX8EAgALgAD/aNpbtEAAAAASUVORK5CYII
       */
      document?: string;
    };
    CourierInfo: {
      /**
       * @description Courier's first name and last initial.
       * @example Alex I.
       */
      name?: string;
      /**
       * @deprecated
       * @description (DEPRECATED) Courier's rating on a scale of 1.0 to 5.0
       */
      rating?: number;
      /**
       * @description The type of vehicle the courier is using. Currently supports bicycle, car, van, truck, scooter, motorcycle, and walker.
       * @example car
       */
      vehicle_type?: string;
      /**
       * @description The courier's phone number. This is a masked phone number that can only receive calls or SMS from the dropoff phone number.
       * @example +16283337630
       */
      phone_number?: string;
      location?: components["schemas"]["LatLng"];
      /**
       * @description A URL to the courier's profile image.
       * @example https://d1w2poirtb3as9.cloudfront.net/default.jpeg?Expires=1683022587&Signature=SDlYXhlrNUXVibLEi1veShGrVQqn~5cHlDmKHmirytOvtRPLUzMICPLoLXL8vn7XREKo6XmRjYbE~tMeCqBf3Pjyc4OKqsAyukoUr5ew7S9ipbJ-O0PCp5ThZ4j46yZquza1s~qOQISHopH734F17BaNxod9E9QPJJ3phFcrl4COKYSt3qPsn9Y9PQxyKecJ5Sr0RveI5hGqtQR~u2d3EZgXmJxuGUdk26WX-Ho1h3ziIpnIBu6P6upbOtlnxLqn-dG7tl15pnn~bW1w0qAemFUUdqWzzWfjVGLHonDqE4LM5xE~t1T~1zJCNQ-uzijjI6tnEfIHJ9LgWRRhX3sKXQ__&Key-Pair-Id=K36LFL06Z5BT10
       */
      img_href?: string;
    };
    LatLng: {
      /**
       * @description Latitude.
       * @example 37.765987
       */
      lat?: number;
      /**
       * @description Longitude.
       * @example -122.43153
       */
      lng?: number;
    };
    Refund: {
      /**
       * Format: date-time
       * @description Date/Time at which the refund was created in UTC Time.
       * @example 2023-03-24T19:02:05Z
       */
      created_at?: string;
      /**
       * @description Three-letter ISO currency code, in uppercase.
       * @example GBP
       */
      currency_code?: string;
      /**
       * @description Unique identifier of the refund request.
       * @example ffe2c0b4-204f-41ca-9230-2b161b8d6c4b
       */
      id?: string;
      /** @description Array of refund fees for the refund. */
      refund_fees?: components["schemas"]["RefundFee"][];
      /** @description Array of refund order items for the refund. */
      refund_order_items?: components["schemas"]["RefundOrderItem"][];
      /**
       * @description Total monetary amount that the partner is liable to their customers for in cents ( ¹/₁₀₀ of currency unit ).
       * @example 680
       */
      total_partner_refund?: number;
      /**
       * @description Total monetary amount that Uber will adjust on the billing details report & invoice in cents ( ¹/₁₀₀ of currency unit ).
       * @example 680
       */
      total_uber_refund?: number;
    };
    RefundFee: {
      /**
       * @description The category of the refund fee. "DELIVERY" or "TAX".
       * @example DELIVERY
       */
      category?: string;
      /**
       * @description The fee code associated with the refund fee. "UBER_DELIVERY_FEE", "PARTNER_FEE" or "PARTNER_TAX".
       * @example UBER_DELIVERY_FEE
       */
      fee_code?: string;
      /**
       * @description The amount of the refund fee of the given category.
       * @example 680
       */
      value?: number;
    };
    RefundOrderItem: {
      /**
       * @description The monetary value of items that the partner is liable towards their customers in cents ( ¹/₁₀₀ of currency unit ).
       * @example 680
       */
      partner_refund_amount?: number;
      /**
       * @description “UBER” or “PARTNER”.
       * @example “UBER”
       */
      party_at_fault?: string;
      /**
       * @description A predefined string of refund reason.
       * @example UBER_ITEM_QUALITY_ISSUE
       */
      reason?: string;
      /** @description Array of refund items for the refund. */
      refund_items?: components["schemas"]["RefundItem"][];
      /**
       * @description The refund amount from Uber's perspective.
       * @example 680
       */
      uber_refund_amount?: number;
    };
    RefundItem: {
      /**
       * @description The name of the item.
       * @example House Tofu-med Firm Regular
       */
      name?: string;
      /**
       * @description The quantity of the item.
       * @example 1
       */
      quantity?: number;
    };
    CreateDeliveryWaypointInfo: {
      /**
       * @description Display name of the person/merchant at the waypoint.
       * @example Joan P.
       */
      name?: string;
      /**
       * @description The masked phone number of the waypoint.
       * @example +16283337630
       */
      phone_number?: string;
      /**
       * @description The address of the waypoint.
       * @example 2200 Market St, San Francisco, CA 94114, US
       */
      address?: string;
      detailed_address?: components["schemas"]["Address"];
      /**
       * @description Additional instructions at the waypoint location.
       * @example
       */
      notes?: string;
      /**
       * @description Delivery instructions provided by the seller for the courier at the waypoint location.
       * @example
       */
      seller_notes?: string;
      /**
       * @description When a picture is requested as proof-of-delivery, this field contains the notes provided by the courier (e.g. where the items were left).
       * @example
       */
      courier_notes?: string;
      location?: components["schemas"]["LatLng"];
      verification_requirements?: components["schemas"]["DropoffVerificationResp"];
      /**
       * @description Delivery status in respect to the waypoint location
       * @enum {string}
       */
      status?: "completed" | "failed";
      /**
       * Format: timestamp
       * @description Timestamp of when the status was triggered
       * @example "2023-05-02T02:30:07.560Z"
       */
      status_timestamp?: string;
      /**
       * @description Unique identifier used by merchants to reference a store or location.
       * @example my_store_123
       */
      external_store_id?: string;
    };
    WaypointInfo: {
      /**
       * @description Display name of the person/merchant at the waypoint.
       * @example Joan P.
       */
      name?: string;
      /**
       * @description The masked phone number of the waypoint.
       * @example +16283337630
       */
      phone_number?: string;
      /**
       * @description The address of the waypoint.
       * @example 2200 Market St, San Francisco, CA 94114, US
       */
      address?: string;
      detailed_address?: components["schemas"]["Address"];
      /**
       * @description Additional instructions at the waypoint location.
       * @example
       */
      notes?: string;
      /**
       * @description Delivery instructions provided by the seller for the courier at the waypoint location.
       * @example
       */
      seller_notes?: string;
      /**
       * @description When a picture is requested as proof-of-delivery, this field contains the notes provided by the courier (e.g. where the items were left).
       * @example
       */
      courier_notes?: string;
      location?: components["schemas"]["LatLng"];
      verification?: components["schemas"]["VerificationProof"];
      verification_requirements?: components["schemas"]["DropoffVerificationResp"];
      /**
       * @description Delivery status in respect to the waypoint location
       * @enum {string}
       */
      status?: "completed" | "failed";
      /**
       * Format: timestamp
       * @description Timestamp of when the status was triggered
       * @example "2023-05-02T02:30:07.560Z"
       */
      status_timestamp?: string;
      /**
       * @description Unique identifier used by merchants to reference a store or location.
       * @example my_store_123
       */
      external_store_id?: string;
    };
    Address: {
      /** @example 2200 Market St */
      street_address_1?: string;
      /** @example */
      street_address_2?: string;
      /** @example San Francisco */
      city?: string;
      /** @example CA */
      state?: string;
      /** @example 94114 */
      zip_code?: string;
      /** @example US */
      country?: string;
    };
    ManifestInfo: {
      /**
       * @description Reference that identifies the manifest.
       * @example EI000001
       */
      reference?: string;
      /**
       * @deprecated
       * @description (DEPRECATED) A detailed description of what the courier will be delivering. It is better to consume the description of each item in `ManifestItem.name`.
       * @example 1 x Package 1
       */
      description?: string;
      /**
       * @description Value of the items in the delivery, in local currency (as defined by the pickup location). e.g. `$10.99` => `1099` for items in the US.
       * @example 1099
       */
      total_value?: number;
    };
    RelatedDelivery: {
      /**
       * @description Unique identifier for the delivery.
       * @example ret_BiymjKtjTwKpoS2kSIuxlv
       */
      id?: string;
      /**
       * @description Indicates the nature of the delivery identified in `related_deliveries`. `original` for the forward leg of the trip, and `returned` for the return leg of the trip.
       * @enum {string}
       */
      relationship?: "return" | "original";
    };
    UpdateDeliveryReq: {
      /**
       * @description Additional instructions for the courier at the dropoff location, accessible after the courier accepts the trip and before heading to the dropoff location. Limited to 280 characters.
       * @example Second floor, black door to the right.
       */
      dropoff_notes?: string;
      dropoff_verification?: components["schemas"]["UpdateDropoffVerificationRequest"];
      /**
       * @description A reference identifying the manifest. Utilize this to link a delivery with relevant data in your system. This detail will be visible within the courier app.\
       * **Note:**
       * 1. Please be aware that the combination of this field with `external_id` must be unique; otherwise, the delivery creation will not succeed.
       * 2. If you can't ensure uniqueness for the manifest_reference, please include the "idempotency_key" in the request body and make sure it is unique.
       *
       * @example REF0000002
       */
      manifest_reference?: string;
      /**
       * @description Additional instructions for the courier at the pickup location. Max 280 characters.
       * @example Follow big green 'Pickup' signs in the parking lot
       */
      pickup_notes?: string;
      pickup_verification?: components["schemas"]["UpdatePickupVerificationRequirement"];
      /**
       * @deprecated
       * @description Flag to indicate this delivery requires signature capture at dropoff.
       */
      requires_dropoff_signature?: boolean;
      /**
       * @deprecated
       * @description (Please use "dropoff_verification -> identification" instead). Flag to indicate this delivery requires ID verification.
       * @example false
       */
      requires_id?: boolean;
      /**
       * @description Amount in cents ( ¹/₁₀₀ of currency unit ) that will be paid to the courier as a tip.
       * @example 500
       */
      tip_by_customer?: number;
      /**
       * @description Dropoff latitude coordinate.
       * @example 40.7727076
       */
      dropoff_latitude?: number;
      /**
       * @description Dropoff longitude coordinate.
       * @example -73.9839082
       */
      dropoff_longitude?: number;
    };
    PODReq: {
      /**
       * @description The waypoint where the verification requirement was taken.
       * @example dropoff
       * @enum {string}
       */
      waypoint: "pickup" | "dropoff" | "return";
      /**
       * @description The type of delivery verification requirement.
       * @example picture
       * @enum {string}
       */
      type: "picture" | "signature" | "pincode";
    };
    inline_response_200: {
      /** @description Array of deliveries matching filters (if any) provided. */
      data?: components["schemas"]["DeliveryResp"][];
      /**
       * @description URL for fetching next set of deliveries.
       * @example api.uber.com/v1/customers/d553004e-a505-4c48-8887-194e57769172/deliveries?offset=30
       */
      next_href?: string;
      /**
       * @description (DEPRECATED) Response is always -1.
       * @example -1
       */
      total_count?: number;
    };
    DeliveryReq_external_user_info_merchant_account: {
      /**
       * @description (RFC 3339) End-user's Account creation time.
       * @example "2019-10-12T07:20:50.520Z"
       */
      account_created_at?: Record<string, never>;
      /**
       * @description (RFC 3339) End-user's email used to create the account.
       * @example "2019-10-12T07:20:50.520Z"
       */
      email?: string;
    };
    DeliveryReq_external_user_info_device: {
      /**
       * @description A string that represents the end-user unique device id.
       * @example f2bdcb36-f86b-4197-89f8-54c72f98d24b
       */
      id?: string;
    };
    /** @description End-user's information to help identify users. */
    DeliveryReq_external_user_info: {
      merchant_account?: components["schemas"]["DeliveryReq_external_user_info_merchant_account"];
      device?: components["schemas"]["DeliveryReq_external_user_info_device"];
    };
  };
  responses: never;
  parameters: {
    /**
     * @description Unique identifier for the organization. Either UUID or starts with `cus_`.
     * @example a11e6f29-6850-4d8d-b88d-0ae69cec1111
     */
    customerId: string;
    /**
     * @description Unique identifier for the delivery. Always starts with del_
     * @example del_ExLGCyywQ5KlvncU2rUUUd3
     */
    deliveryId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
